/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateInvoiceDto,
  InvoiceDetailDto,
  InvoiceListResponseDto,
  InvoiceStatusHistoryDto,
  UpdateInvoiceDto,
} from '../models/index';
import {
    CreateInvoiceDtoFromJSON,
    CreateInvoiceDtoToJSON,
    InvoiceDetailDtoFromJSON,
    InvoiceDetailDtoToJSON,
    InvoiceListResponseDtoFromJSON,
    InvoiceListResponseDtoToJSON,
    InvoiceStatusHistoryDtoFromJSON,
    InvoiceStatusHistoryDtoToJSON,
    UpdateInvoiceDtoFromJSON,
    UpdateInvoiceDtoToJSON,
} from '../models/index';

export interface CreateRequest {
    createInvoiceDto: CreateInvoiceDto;
}

export interface GetByIdRequest {
    id: string;
    organizationId?: any;
}

export interface GetStatusHistoryRequest {
    id: string;
    organizationId?: any;
}

export interface ListRequest {
    status?: string;
    search?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: ListSortOrderEnum;
    organizationId?: any;
}

export interface UpdateRequest {
    id: string;
    updateInvoiceDto: UpdateInvoiceDto;
}

/**
 * SMBInvoicesApi - interface
 * 
 * @export
 * @interface SMBInvoicesApiInterface
 */
export interface SMBInvoicesApiInterface {
    /**
     * Create a new invoice in DRAFT status. Organization ID is extracted from JWT token.
     * @summary Create invoice
     * @param {CreateInvoiceDto} createInvoiceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBInvoicesApiInterface
     */
    createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceDetailDto>>;

    /**
     * Create a new invoice in DRAFT status. Organization ID is extracted from JWT token.
     * Create invoice
     */
    create(createInvoiceDto: CreateInvoiceDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceDetailDto>;

    /**
     * Retrieve detailed invoice information including documents and status history. Organization ID is extracted from JWT token or query parameter (dev mode).
     * @summary Get invoice by ID
     * @param {string} id Invoice ID
     * @param {any} [organizationId] Organization ID (optional during development when using @Public())
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBInvoicesApiInterface
     */
    getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceDetailDto>>;

    /**
     * Retrieve detailed invoice information including documents and status history. Organization ID is extracted from JWT token or query parameter (dev mode).
     * Get invoice by ID
     */
    getById(id: string, organizationId?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceDetailDto>;

    /**
     * Retrieve complete status transition history for an invoice. Organization ID is extracted from JWT token or query parameter (dev mode).
     * @summary Get invoice status history
     * @param {string} id Invoice ID
     * @param {any} [organizationId] Organization ID (optional during development when using @Public())
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBInvoicesApiInterface
     */
    getStatusHistoryRaw(requestParameters: GetStatusHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvoiceStatusHistoryDto>>>;

    /**
     * Retrieve complete status transition history for an invoice. Organization ID is extracted from JWT token or query parameter (dev mode).
     * Get invoice status history
     */
    getStatusHistory(id: string, organizationId?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvoiceStatusHistoryDto>>;

    /**
     * Get paginated list of invoices with filtering and sorting. Organization ID is extracted from JWT token or query parameter (dev mode).
     * @summary List invoices
     * @param {string} [status] 
     * @param {string} [search] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [sortBy] 
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {any} [organizationId] Organization ID (optional during development when using @Public())
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBInvoicesApiInterface
     */
    listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceListResponseDto>>;

    /**
     * Get paginated list of invoices with filtering and sorting. Organization ID is extracted from JWT token or query parameter (dev mode).
     * List invoices
     */
    list(status?: string, search?: string, page?: number, limit?: number, sortBy?: string, sortOrder?: ListSortOrderEnum, organizationId?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceListResponseDto>;

    /**
     * Update invoice details (only DRAFT status invoices can be updated). Organization ID is extracted from JWT token.
     * @summary Update invoice
     * @param {string} id Invoice ID
     * @param {UpdateInvoiceDto} updateInvoiceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBInvoicesApiInterface
     */
    updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceDetailDto>>;

    /**
     * Update invoice details (only DRAFT status invoices can be updated). Organization ID is extracted from JWT token.
     * Update invoice
     */
    update(id: string, updateInvoiceDto: UpdateInvoiceDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceDetailDto>;

}

/**
 * 
 */
export class SMBInvoicesApi extends runtime.BaseAPI implements SMBInvoicesApiInterface {

    /**
     * Create a new invoice in DRAFT status. Organization ID is extracted from JWT token.
     * Create invoice
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceDetailDto>> {
        if (requestParameters['createInvoiceDto'] == null) {
            throw new runtime.RequiredError(
                'createInvoiceDto',
                'Required parameter "createInvoiceDto" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/smb/invoices`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvoiceDtoToJSON(requestParameters['createInvoiceDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceDetailDtoFromJSON(jsonValue));
    }

    /**
     * Create a new invoice in DRAFT status. Organization ID is extracted from JWT token.
     * Create invoice
     */
    async create(createInvoiceDto: CreateInvoiceDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceDetailDto> {
        const response = await this.createRaw({ createInvoiceDto: createInvoiceDto }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve detailed invoice information including documents and status history. Organization ID is extracted from JWT token or query parameter (dev mode).
     * Get invoice by ID
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceDetailDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/smb/invoices/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceDetailDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed invoice information including documents and status history. Organization ID is extracted from JWT token or query parameter (dev mode).
     * Get invoice by ID
     */
    async getById(id: string, organizationId?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceDetailDto> {
        const response = await this.getByIdRaw({ id: id, organizationId: organizationId }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve complete status transition history for an invoice. Organization ID is extracted from JWT token or query parameter (dev mode).
     * Get invoice status history
     */
    async getStatusHistoryRaw(requestParameters: GetStatusHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InvoiceStatusHistoryDto>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getStatusHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/smb/invoices/{id}/status-history`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceStatusHistoryDtoFromJSON));
    }

    /**
     * Retrieve complete status transition history for an invoice. Organization ID is extracted from JWT token or query parameter (dev mode).
     * Get invoice status history
     */
    async getStatusHistory(id: string, organizationId?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InvoiceStatusHistoryDto>> {
        const response = await this.getStatusHistoryRaw({ id: id, organizationId: organizationId }, initOverrides);
        return await response.value();
    }

    /**
     * Get paginated list of invoices with filtering and sorting. Organization ID is extracted from JWT token or query parameter (dev mode).
     * List invoices
     */
    async listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/smb/invoices`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get paginated list of invoices with filtering and sorting. Organization ID is extracted from JWT token or query parameter (dev mode).
     * List invoices
     */
    async list(status?: string, search?: string, page?: number, limit?: number, sortBy?: string, sortOrder?: ListSortOrderEnum, organizationId?: any, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceListResponseDto> {
        const response = await this.listRaw({ status: status, search: search, page: page, limit: limit, sortBy: sortBy, sortOrder: sortOrder, organizationId: organizationId }, initOverrides);
        return await response.value();
    }

    /**
     * Update invoice details (only DRAFT status invoices can be updated). Organization ID is extracted from JWT token.
     * Update invoice
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceDetailDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling update().'
            );
        }

        if (requestParameters['updateInvoiceDto'] == null) {
            throw new runtime.RequiredError(
                'updateInvoiceDto',
                'Required parameter "updateInvoiceDto" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/smb/invoices/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInvoiceDtoToJSON(requestParameters['updateInvoiceDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceDetailDtoFromJSON(jsonValue));
    }

    /**
     * Update invoice details (only DRAFT status invoices can be updated). Organization ID is extracted from JWT token.
     * Update invoice
     */
    async update(id: string, updateInvoiceDto: UpdateInvoiceDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceDetailDto> {
        const response = await this.updateRaw({ id: id, updateInvoiceDto: updateInvoiceDto }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListSortOrderEnum = typeof ListSortOrderEnum[keyof typeof ListSortOrderEnum];
