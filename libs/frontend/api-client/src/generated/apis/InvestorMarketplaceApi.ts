/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MarketplaceDetailDto,
  MarketplaceListResponseDto,
} from '../models/index';
import {
    MarketplaceDetailDtoFromJSON,
    MarketplaceDetailDtoToJSON,
    MarketplaceListResponseDtoFromJSON,
    MarketplaceListResponseDtoToJSON,
} from '../models/index';

export interface GetInvoiceDetailRequest {
    id: string;
}

export interface ListInvoicesRequest {
    riskScore?: string;
    minApr?: number;
    maxApr?: number;
    minAmount?: number;
    maxAmount?: number;
    search?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: ListInvoicesSortOrderEnum;
}

/**
 * InvestorMarketplaceApi - interface
 * 
 * @export
 * @interface InvestorMarketplaceApiInterface
 */
export interface InvestorMarketplaceApiInterface {
    /**
     * Retrieve detailed information about a specific marketplace invoice
     * @summary Get marketplace invoice detail
     * @param {string} id Invoice ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorMarketplaceApiInterface
     */
    getInvoiceDetailRaw(requestParameters: GetInvoiceDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketplaceDetailDto>>;

    /**
     * Retrieve detailed information about a specific marketplace invoice
     * Get marketplace invoice detail
     */
    getInvoiceDetail(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketplaceDetailDto>;

    /**
     * Get paginated list of available invoices for funding with filtering
     * @summary List marketplace invoices
     * @param {string} [riskScore] 
     * @param {number} [minApr] 
     * @param {number} [maxApr] 
     * @param {number} [minAmount] 
     * @param {number} [maxAmount] 
     * @param {string} [search] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [sortBy] 
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorMarketplaceApiInterface
     */
    listInvoicesRaw(requestParameters: ListInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketplaceListResponseDto>>;

    /**
     * Get paginated list of available invoices for funding with filtering
     * List marketplace invoices
     */
    listInvoices(riskScore?: string, minApr?: number, maxApr?: number, minAmount?: number, maxAmount?: number, search?: string, page?: number, limit?: number, sortBy?: string, sortOrder?: ListInvoicesSortOrderEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketplaceListResponseDto>;

}

/**
 * 
 */
export class InvestorMarketplaceApi extends runtime.BaseAPI implements InvestorMarketplaceApiInterface {

    /**
     * Retrieve detailed information about a specific marketplace invoice
     * Get marketplace invoice detail
     */
    async getInvoiceDetailRaw(requestParameters: GetInvoiceDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketplaceDetailDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getInvoiceDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/investor/marketplace/invoices/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketplaceDetailDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed information about a specific marketplace invoice
     * Get marketplace invoice detail
     */
    async getInvoiceDetail(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketplaceDetailDto> {
        const response = await this.getInvoiceDetailRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get paginated list of available invoices for funding with filtering
     * List marketplace invoices
     */
    async listInvoicesRaw(requestParameters: ListInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketplaceListResponseDto>> {
        const queryParameters: any = {};

        if (requestParameters['riskScore'] != null) {
            queryParameters['riskScore'] = requestParameters['riskScore'];
        }

        if (requestParameters['minApr'] != null) {
            queryParameters['minApr'] = requestParameters['minApr'];
        }

        if (requestParameters['maxApr'] != null) {
            queryParameters['maxApr'] = requestParameters['maxApr'];
        }

        if (requestParameters['minAmount'] != null) {
            queryParameters['minAmount'] = requestParameters['minAmount'];
        }

        if (requestParameters['maxAmount'] != null) {
            queryParameters['maxAmount'] = requestParameters['maxAmount'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/investor/marketplace/invoices`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketplaceListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get paginated list of available invoices for funding with filtering
     * List marketplace invoices
     */
    async listInvoices(riskScore?: string, minApr?: number, maxApr?: number, minAmount?: number, maxAmount?: number, search?: string, page?: number, limit?: number, sortBy?: string, sortOrder?: ListInvoicesSortOrderEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketplaceListResponseDto> {
        const response = await this.listInvoicesRaw({ riskScore: riskScore, minApr: minApr, maxApr: maxApr, minAmount: minAmount, maxAmount: maxAmount, search: search, page: page, limit: limit, sortBy: sortBy, sortOrder: sortOrder }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListInvoicesSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ListInvoicesSortOrderEnum = typeof ListInvoicesSortOrderEnum[keyof typeof ListInvoicesSortOrderEnum];
