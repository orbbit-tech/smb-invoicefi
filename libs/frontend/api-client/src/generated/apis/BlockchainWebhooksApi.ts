/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface HandleAlchemyWebhookRequest {
    xAlchemySignature: string;
}

export interface HandleCdpWebhookRequest {
    xWebhookSignature: string;
}

export interface HandleWebhookRequest {
    xWebhookSignature: string;
}

/**
 * BlockchainWebhooksApi - interface
 * 
 * @export
 * @interface BlockchainWebhooksApiInterface
 */
export interface BlockchainWebhooksApiInterface {
    /**
     * Endpoint for Alchemy Notify to send blockchain event notifications
     * @summary Receive Alchemy webhook notifications
     * @param {string} xAlchemySignature Alchemy webhook signature for verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainWebhooksApiInterface
     */
    handleAlchemyWebhookRaw(requestParameters: HandleAlchemyWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Endpoint for Alchemy Notify to send blockchain event notifications
     * Receive Alchemy webhook notifications
     */
    handleAlchemyWebhook(xAlchemySignature: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * @summary Receive CDP webhook notifications (legacy)
     * @param {string} xWebhookSignature CDP webhook signature for verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainWebhooksApiInterface
     */
    handleCdpWebhookRaw(requestParameters: HandleCdpWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * Receive CDP webhook notifications (legacy)
     */
    handleCdpWebhook(xWebhookSignature: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * @summary Receive CDP webhook notifications
     * @param {string} xWebhookSignature CDP webhook signature for verification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainWebhooksApiInterface
     */
    handleWebhookRaw(requestParameters: HandleWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * Receive CDP webhook notifications
     */
    handleWebhook(xWebhookSignature: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Test endpoint to verify webhook receiver is working
     * @summary Webhook health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainWebhooksApiInterface
     */
    healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Test endpoint to verify webhook receiver is working
     * Webhook health check
     */
    healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class BlockchainWebhooksApi extends runtime.BaseAPI implements BlockchainWebhooksApiInterface {

    /**
     * Endpoint for Alchemy Notify to send blockchain event notifications
     * Receive Alchemy webhook notifications
     */
    async handleAlchemyWebhookRaw(requestParameters: HandleAlchemyWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xAlchemySignature'] == null) {
            throw new runtime.RequiredError(
                'xAlchemySignature',
                'Required parameter "xAlchemySignature" was null or undefined when calling handleAlchemyWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAlchemySignature'] != null) {
            headerParameters['x-alchemy-signature'] = String(requestParameters['xAlchemySignature']);
        }


        let urlPath = `/v1/webhooks/blockchain/alchemy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint for Alchemy Notify to send blockchain event notifications
     * Receive Alchemy webhook notifications
     */
    async handleAlchemyWebhook(xAlchemySignature: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleAlchemyWebhookRaw({ xAlchemySignature: xAlchemySignature }, initOverrides);
    }

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * Receive CDP webhook notifications (legacy)
     */
    async handleCdpWebhookRaw(requestParameters: HandleCdpWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xWebhookSignature'] == null) {
            throw new runtime.RequiredError(
                'xWebhookSignature',
                'Required parameter "xWebhookSignature" was null or undefined when calling handleCdpWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xWebhookSignature'] != null) {
            headerParameters['x-webhook-signature'] = String(requestParameters['xWebhookSignature']);
        }


        let urlPath = `/v1/webhooks/blockchain/cdp`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * Receive CDP webhook notifications (legacy)
     */
    async handleCdpWebhook(xWebhookSignature: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleCdpWebhookRaw({ xWebhookSignature: xWebhookSignature }, initOverrides);
    }

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * Receive CDP webhook notifications
     */
    async handleWebhookRaw(requestParameters: HandleWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['xWebhookSignature'] == null) {
            throw new runtime.RequiredError(
                'xWebhookSignature',
                'Required parameter "xWebhookSignature" was null or undefined when calling handleWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xWebhookSignature'] != null) {
            headerParameters['x-webhook-signature'] = String(requestParameters['xWebhookSignature']);
        }


        let urlPath = `/v1/webhooks/blockchain`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Endpoint for Coinbase Developer Platform to send blockchain event notifications
     * Receive CDP webhook notifications
     */
    async handleWebhook(xWebhookSignature: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleWebhookRaw({ xWebhookSignature: xWebhookSignature }, initOverrides);
    }

    /**
     * Test endpoint to verify webhook receiver is working
     * Webhook health check
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/webhooks/blockchain/health`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test endpoint to verify webhook receiver is working
     * Webhook health check
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.healthCheckRaw(initOverrides);
    }

}
