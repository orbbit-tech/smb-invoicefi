/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InvestorPositionDto,
  PortfolioSummaryDto,
  PositionsListResponseDto,
} from '../models/index';
import {
    InvestorPositionDtoFromJSON,
    InvestorPositionDtoToJSON,
    PortfolioSummaryDtoFromJSON,
    PortfolioSummaryDtoToJSON,
    PositionsListResponseDtoFromJSON,
    PositionsListResponseDtoToJSON,
} from '../models/index';

export interface GetPositionByIdRequest {
    id: string;
    investorAddress: string;
}

export interface GetPositionsRequest {
    investorAddress: string;
    status?: string;
    page?: number;
    limit?: number;
    sortBy?: string;
    sortOrder?: GetPositionsSortOrderEnum;
}

export interface GetSummaryRequest {
    investorAddress: string;
}

/**
 * InvestorPortfolioApi - interface
 * 
 * @export
 * @interface InvestorPortfolioApiInterface
 */
export interface InvestorPortfolioApiInterface {
    /**
     * Retrieve detailed information about a specific investment position
     * @summary Get position detail
     * @param {string} id Position ID
     * @param {string} investorAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorPortfolioApiInterface
     */
    getPositionByIdRaw(requestParameters: GetPositionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvestorPositionDto>>;

    /**
     * Retrieve detailed information about a specific investment position
     * Get position detail
     */
    getPositionById(id: string, investorAddress: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvestorPositionDto>;

    /**
     * Get paginated list of all investment positions with detailed information
     * @summary List investor positions
     * @param {string} investorAddress 
     * @param {string} [status] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [sortBy] 
     * @param {'asc' | 'desc'} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorPortfolioApiInterface
     */
    getPositionsRaw(requestParameters: GetPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PositionsListResponseDto>>;

    /**
     * Get paginated list of all investment positions with detailed information
     * List investor positions
     */
    getPositions(investorAddress: string, status?: string, page?: number, limit?: number, sortBy?: string, sortOrder?: GetPositionsSortOrderEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PositionsListResponseDto>;

    /**
     * Retrieve aggregated portfolio metrics including total invested, returns, and position counts
     * @summary Get portfolio summary
     * @param {string} investorAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvestorPortfolioApiInterface
     */
    getSummaryRaw(requestParameters: GetSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioSummaryDto>>;

    /**
     * Retrieve aggregated portfolio metrics including total invested, returns, and position counts
     * Get portfolio summary
     */
    getSummary(investorAddress: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioSummaryDto>;

}

/**
 * 
 */
export class InvestorPortfolioApi extends runtime.BaseAPI implements InvestorPortfolioApiInterface {

    /**
     * Retrieve detailed information about a specific investment position
     * Get position detail
     */
    async getPositionByIdRaw(requestParameters: GetPositionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvestorPositionDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPositionById().'
            );
        }

        if (requestParameters['investorAddress'] == null) {
            throw new runtime.RequiredError(
                'investorAddress',
                'Required parameter "investorAddress" was null or undefined when calling getPositionById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['investorAddress'] != null) {
            queryParameters['investorAddress'] = requestParameters['investorAddress'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/investor/portfolio/positions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvestorPositionDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed information about a specific investment position
     * Get position detail
     */
    async getPositionById(id: string, investorAddress: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvestorPositionDto> {
        const response = await this.getPositionByIdRaw({ id: id, investorAddress: investorAddress }, initOverrides);
        return await response.value();
    }

    /**
     * Get paginated list of all investment positions with detailed information
     * List investor positions
     */
    async getPositionsRaw(requestParameters: GetPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PositionsListResponseDto>> {
        if (requestParameters['investorAddress'] == null) {
            throw new runtime.RequiredError(
                'investorAddress',
                'Required parameter "investorAddress" was null or undefined when calling getPositions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['investorAddress'] != null) {
            queryParameters['investorAddress'] = requestParameters['investorAddress'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/investor/portfolio/positions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PositionsListResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get paginated list of all investment positions with detailed information
     * List investor positions
     */
    async getPositions(investorAddress: string, status?: string, page?: number, limit?: number, sortBy?: string, sortOrder?: GetPositionsSortOrderEnum, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PositionsListResponseDto> {
        const response = await this.getPositionsRaw({ investorAddress: investorAddress, status: status, page: page, limit: limit, sortBy: sortBy, sortOrder: sortOrder }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve aggregated portfolio metrics including total invested, returns, and position counts
     * Get portfolio summary
     */
    async getSummaryRaw(requestParameters: GetSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioSummaryDto>> {
        if (requestParameters['investorAddress'] == null) {
            throw new runtime.RequiredError(
                'investorAddress',
                'Required parameter "investorAddress" was null or undefined when calling getSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['investorAddress'] != null) {
            queryParameters['investorAddress'] = requestParameters['investorAddress'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/investor/portfolio/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioSummaryDtoFromJSON(jsonValue));
    }

    /**
     * Retrieve aggregated portfolio metrics including total invested, returns, and position counts
     * Get portfolio summary
     */
    async getSummary(investorAddress: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioSummaryDto> {
        const response = await this.getSummaryRaw({ investorAddress: investorAddress }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPositionsSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetPositionsSortOrderEnum = typeof GetPositionsSortOrderEnum[keyof typeof GetPositionsSortOrderEnum];
