/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticateEmailOtp200Response,
  AuthenticateEmailOtpDto,
  CompleteSignup200Response,
  CompleteSignupDto,
  ExchangeIntermediateSessionDto,
  SendEmailOtpDto,
} from '../models/index';
import {
    AuthenticateEmailOtp200ResponseFromJSON,
    AuthenticateEmailOtp200ResponseToJSON,
    AuthenticateEmailOtpDtoFromJSON,
    AuthenticateEmailOtpDtoToJSON,
    CompleteSignup200ResponseFromJSON,
    CompleteSignup200ResponseToJSON,
    CompleteSignupDtoFromJSON,
    CompleteSignupDtoToJSON,
    ExchangeIntermediateSessionDtoFromJSON,
    ExchangeIntermediateSessionDtoToJSON,
    SendEmailOtpDtoFromJSON,
    SendEmailOtpDtoToJSON,
} from '../models/index';

export interface AuthenticateEmailOtpRequest {
    authenticateEmailOtpDto: AuthenticateEmailOtpDto;
}

export interface CompleteSignupRequest {
    completeSignupDto: CompleteSignupDto;
}

export interface ExchangeIntermediateSessionRequest {
    exchangeIntermediateSessionDto: ExchangeIntermediateSessionDto;
}

export interface LogoutRequest {
    authorization: string;
}

export interface SendEmailOtpRequest {
    sendEmailOtpDto: SendEmailOtpDto;
}

/**
 * SMBAuthenticationApi - interface
 * 
 * @export
 * @interface SMBAuthenticationApiInterface
 */
export interface SMBAuthenticationApiInterface {
    /**
     * Verifies the OTP code and returns intermediate session token
     * @summary Authenticate OTP code
     * @param {AuthenticateEmailOtpDto} authenticateEmailOtpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBAuthenticationApiInterface
     */
    authenticateEmailOtpRaw(requestParameters: AuthenticateEmailOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateEmailOtp200Response>>;

    /**
     * Verifies the OTP code and returns intermediate session token
     * Authenticate OTP code
     */
    authenticateEmailOtp(authenticateEmailOtpDto: AuthenticateEmailOtpDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateEmailOtp200Response>;

    /**
     * Creates a new organization and returns session JWT in HTTP-only cookie
     * @summary Complete signup by creating new organization
     * @param {CompleteSignupDto} completeSignupDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBAuthenticationApiInterface
     */
    completeSignupRaw(requestParameters: CompleteSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteSignup200Response>>;

    /**
     * Creates a new organization and returns session JWT in HTTP-only cookie
     * Complete signup by creating new organization
     */
    completeSignup(completeSignupDto: CompleteSignupDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteSignup200Response>;

    /**
     * Joins an existing organization and returns session JWT in HTTP-only cookie
     * @summary Exchange intermediate session for full session
     * @param {ExchangeIntermediateSessionDto} exchangeIntermediateSessionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBAuthenticationApiInterface
     */
    exchangeIntermediateSessionRaw(requestParameters: ExchangeIntermediateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteSignup200Response>>;

    /**
     * Joins an existing organization and returns session JWT in HTTP-only cookie
     * Exchange intermediate session for full session
     */
    exchangeIntermediateSession(exchangeIntermediateSessionDto: ExchangeIntermediateSessionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteSignup200Response>;

    /**
     * Revokes the session and clears cookies
     * @summary Logout user
     * @param {string} authorization Bearer token with session JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBAuthenticationApiInterface
     */
    logoutRaw(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Revokes the session and clears cookies
     * Logout user
     */
    logout(authorization: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Sends a one-time password to the specified email address
     * @summary Send OTP to email
     * @param {SendEmailOtpDto} sendEmailOtpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SMBAuthenticationApiInterface
     */
    sendEmailOtpRaw(requestParameters: SendEmailOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Sends a one-time password to the specified email address
     * Send OTP to email
     */
    sendEmailOtp(sendEmailOtpDto: SendEmailOtpDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SMBAuthenticationApi extends runtime.BaseAPI implements SMBAuthenticationApiInterface {

    /**
     * Verifies the OTP code and returns intermediate session token
     * Authenticate OTP code
     */
    async authenticateEmailOtpRaw(requestParameters: AuthenticateEmailOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateEmailOtp200Response>> {
        if (requestParameters['authenticateEmailOtpDto'] == null) {
            throw new runtime.RequiredError(
                'authenticateEmailOtpDto',
                'Required parameter "authenticateEmailOtpDto" was null or undefined when calling authenticateEmailOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/smb/auth/email/otp/authenticate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateEmailOtpDtoToJSON(requestParameters['authenticateEmailOtpDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateEmailOtp200ResponseFromJSON(jsonValue));
    }

    /**
     * Verifies the OTP code and returns intermediate session token
     * Authenticate OTP code
     */
    async authenticateEmailOtp(authenticateEmailOtpDto: AuthenticateEmailOtpDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateEmailOtp200Response> {
        const response = await this.authenticateEmailOtpRaw({ authenticateEmailOtpDto: authenticateEmailOtpDto }, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new organization and returns session JWT in HTTP-only cookie
     * Complete signup by creating new organization
     */
    async completeSignupRaw(requestParameters: CompleteSignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteSignup200Response>> {
        if (requestParameters['completeSignupDto'] == null) {
            throw new runtime.RequiredError(
                'completeSignupDto',
                'Required parameter "completeSignupDto" was null or undefined when calling completeSignup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/smb/auth/complete-signup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteSignupDtoToJSON(requestParameters['completeSignupDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteSignup200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new organization and returns session JWT in HTTP-only cookie
     * Complete signup by creating new organization
     */
    async completeSignup(completeSignupDto: CompleteSignupDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteSignup200Response> {
        const response = await this.completeSignupRaw({ completeSignupDto: completeSignupDto }, initOverrides);
        return await response.value();
    }

    /**
     * Joins an existing organization and returns session JWT in HTTP-only cookie
     * Exchange intermediate session for full session
     */
    async exchangeIntermediateSessionRaw(requestParameters: ExchangeIntermediateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteSignup200Response>> {
        if (requestParameters['exchangeIntermediateSessionDto'] == null) {
            throw new runtime.RequiredError(
                'exchangeIntermediateSessionDto',
                'Required parameter "exchangeIntermediateSessionDto" was null or undefined when calling exchangeIntermediateSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/smb/auth/intermediate-sessions/exchange`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeIntermediateSessionDtoToJSON(requestParameters['exchangeIntermediateSessionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteSignup200ResponseFromJSON(jsonValue));
    }

    /**
     * Joins an existing organization and returns session JWT in HTTP-only cookie
     * Exchange intermediate session for full session
     */
    async exchangeIntermediateSession(exchangeIntermediateSessionDto: ExchangeIntermediateSessionDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteSignup200Response> {
        const response = await this.exchangeIntermediateSessionRaw({ exchangeIntermediateSessionDto: exchangeIntermediateSessionDto }, initOverrides);
        return await response.value();
    }

    /**
     * Revokes the session and clears cookies
     * Logout user
     */
    async logoutRaw(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling logout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['authorization'] = String(requestParameters['authorization']);
        }


        let urlPath = `/v1/smb/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes the session and clears cookies
     * Logout user
     */
    async logout(authorization: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutRaw({ authorization: authorization }, initOverrides);
    }

    /**
     * Sends a one-time password to the specified email address
     * Send OTP to email
     */
    async sendEmailOtpRaw(requestParameters: SendEmailOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sendEmailOtpDto'] == null) {
            throw new runtime.RequiredError(
                'sendEmailOtpDto',
                'Required parameter "sendEmailOtpDto" was null or undefined when calling sendEmailOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/v1/smb/auth/email/otp/send`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendEmailOtpDtoToJSON(requestParameters['sendEmailOtpDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sends a one-time password to the specified email address
     * Send OTP to email
     */
    async sendEmailOtp(sendEmailOtpDto: SendEmailOtpDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendEmailOtpRaw({ sendEmailOtpDto: sendEmailOtpDto }, initOverrides);
    }

}
