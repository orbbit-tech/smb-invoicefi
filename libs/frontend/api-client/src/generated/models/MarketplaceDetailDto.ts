/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UnderwritingDto } from './UnderwritingDto';
import {
    UnderwritingDtoFromJSON,
    UnderwritingDtoFromJSONTyped,
    UnderwritingDtoToJSON,
    UnderwritingDtoToJSONTyped,
} from './UnderwritingDto';
import type { IssuerDto } from './IssuerDto';
import {
    IssuerDtoFromJSON,
    IssuerDtoFromJSONTyped,
    IssuerDtoToJSON,
    IssuerDtoToJSONTyped,
} from './IssuerDto';
import type { PayerCompanyDto } from './PayerCompanyDto';
import {
    PayerCompanyDtoFromJSON,
    PayerCompanyDtoFromJSONTyped,
    PayerCompanyDtoToJSON,
    PayerCompanyDtoToJSONTyped,
} from './PayerCompanyDto';
import type { DocumentDto } from './DocumentDto';
import {
    DocumentDtoFromJSON,
    DocumentDtoFromJSONTyped,
    DocumentDtoToJSON,
    DocumentDtoToJSONTyped,
} from './DocumentDto';

/**
 * 
 * @export
 * @interface MarketplaceDetailDto
 */
export interface MarketplaceDetailDto {
    /**
     * 
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    invoiceNumber: string;
    /**
     * Amount in 6-decimal format (e.g., for USDC: 1,000,000 = $1)
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    amount: number;
    /**
     * APR with 6 decimals (e.g., 365,000 = 36.5%, where 1,000,000 = 100%)
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    apr: number;
    /**
     * Discount rate with 6 decimals (e.g., 60,000 = 6%)
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    discountRate: number;
    /**
     * Unix timestamp
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    invoiceDate: number;
    /**
     * Unix timestamp
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    dueAt: number;
    /**
     * Days until due date
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    daysUntilDue: number;
    /**
     * Expected return in 6-decimal format
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    expectedReturn: number;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    lifecycleStatus: string;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    riskScore: string;
    /**
     * 
     * @type {IssuerDto}
     * @memberof MarketplaceDetailDto
     */
    issuer: IssuerDto;
    /**
     * 
     * @type {PayerCompanyDto}
     * @memberof MarketplaceDetailDto
     */
    payer: PayerCompanyDto;
    /**
     * ISO 8601 date string
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    metadataUri?: string;
    /**
     * 
     * @type {UnderwritingDto}
     * @memberof MarketplaceDetailDto
     */
    underwriting: UnderwritingDto;
    /**
     * 
     * @type {Array<DocumentDto>}
     * @memberof MarketplaceDetailDto
     */
    documents: Array<DocumentDto>;
    /**
     * Funding amount in 6-decimal format (after discount)
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    fundingAmount: number;
    /**
     * Expected repayment in 6-decimal format
     * @type {number}
     * @memberof MarketplaceDetailDto
     */
    expectedRepayment: number;
    /**
     * Token ID if NFT is minted
     * @type {string}
     * @memberof MarketplaceDetailDto
     */
    nftTokenId: string;
}

/**
 * Check if a given object implements the MarketplaceDetailDto interface.
 */
export function instanceOfMarketplaceDetailDto(value: object): value is MarketplaceDetailDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('invoiceNumber' in value) || value['invoiceNumber'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('apr' in value) || value['apr'] === undefined) return false;
    if (!('discountRate' in value) || value['discountRate'] === undefined) return false;
    if (!('invoiceDate' in value) || value['invoiceDate'] === undefined) return false;
    if (!('dueAt' in value) || value['dueAt'] === undefined) return false;
    if (!('daysUntilDue' in value) || value['daysUntilDue'] === undefined) return false;
    if (!('expectedReturn' in value) || value['expectedReturn'] === undefined) return false;
    if (!('lifecycleStatus' in value) || value['lifecycleStatus'] === undefined) return false;
    if (!('riskScore' in value) || value['riskScore'] === undefined) return false;
    if (!('issuer' in value) || value['issuer'] === undefined) return false;
    if (!('payer' in value) || value['payer'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('underwriting' in value) || value['underwriting'] === undefined) return false;
    if (!('documents' in value) || value['documents'] === undefined) return false;
    if (!('fundingAmount' in value) || value['fundingAmount'] === undefined) return false;
    if (!('expectedRepayment' in value) || value['expectedRepayment'] === undefined) return false;
    if (!('nftTokenId' in value) || value['nftTokenId'] === undefined) return false;
    return true;
}

export function MarketplaceDetailDtoFromJSON(json: any): MarketplaceDetailDto {
    return MarketplaceDetailDtoFromJSONTyped(json, false);
}

export function MarketplaceDetailDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MarketplaceDetailDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'invoiceNumber': json['invoiceNumber'],
        'amount': json['amount'],
        'apr': json['apr'],
        'discountRate': json['discountRate'],
        'invoiceDate': json['invoiceDate'],
        'dueAt': json['dueAt'],
        'daysUntilDue': json['daysUntilDue'],
        'expectedReturn': json['expectedReturn'],
        'lifecycleStatus': json['lifecycleStatus'],
        'riskScore': json['riskScore'],
        'issuer': IssuerDtoFromJSON(json['issuer']),
        'payer': PayerCompanyDtoFromJSON(json['payer']),
        'createdAt': json['createdAt'],
        'description': json['description'] == null ? undefined : json['description'],
        'metadataUri': json['metadataUri'] == null ? undefined : json['metadataUri'],
        'underwriting': UnderwritingDtoFromJSON(json['underwriting']),
        'documents': ((json['documents'] as Array<any>).map(DocumentDtoFromJSON)),
        'fundingAmount': json['fundingAmount'],
        'expectedRepayment': json['expectedRepayment'],
        'nftTokenId': json['nftTokenId'],
    };
}

export function MarketplaceDetailDtoToJSON(json: any): MarketplaceDetailDto {
    return MarketplaceDetailDtoToJSONTyped(json, false);
}

export function MarketplaceDetailDtoToJSONTyped(value?: MarketplaceDetailDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'invoiceNumber': value['invoiceNumber'],
        'amount': value['amount'],
        'apr': value['apr'],
        'discountRate': value['discountRate'],
        'invoiceDate': value['invoiceDate'],
        'dueAt': value['dueAt'],
        'daysUntilDue': value['daysUntilDue'],
        'expectedReturn': value['expectedReturn'],
        'lifecycleStatus': value['lifecycleStatus'],
        'riskScore': value['riskScore'],
        'issuer': IssuerDtoToJSON(value['issuer']),
        'payer': PayerCompanyDtoToJSON(value['payer']),
        'createdAt': value['createdAt'],
        'description': value['description'],
        'metadataUri': value['metadataUri'],
        'underwriting': UnderwritingDtoToJSON(value['underwriting']),
        'documents': ((value['documents'] as Array<any>).map(DocumentDtoToJSON)),
        'fundingAmount': value['fundingAmount'],
        'expectedRepayment': value['expectedRepayment'],
        'nftTokenId': value['nftTokenId'],
    };
}

