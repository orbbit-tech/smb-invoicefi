/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionDto
 */
export interface TransactionDto {
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    txHash: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    txType: TransactionDtoTxTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    fromAddress: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    toAddress: string;
    /**
     * Amount in cents
     * @type {number}
     * @memberof TransactionDto
     */
    amount: number;
    /**
     * Block number
     * @type {number}
     * @memberof TransactionDto
     */
    blockNumber: number;
    /**
     * Unix timestamp
     * @type {number}
     * @memberof TransactionDto
     */
    blockTimestamp: number;
    /**
     * Gas used
     * @type {number}
     * @memberof TransactionDto
     */
    gasUsed: number;
    /**
     * Gas price in wei
     * @type {string}
     * @memberof TransactionDto
     */
    gasPriceWei: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionDto
     */
    status: string;
    /**
     * ISO 8601 date string
     * @type {string}
     * @memberof TransactionDto
     */
    createdAt: string;
}


/**
 * @export
 */
export const TransactionDtoTxTypeEnum = {
    Mint: 'MINT',
    Funding: 'FUNDING',
    Repayment: 'REPAYMENT',
    Settlement: 'SETTLEMENT',
    Transfer: 'TRANSFER',
    Distribution: 'DISTRIBUTION'
} as const;
export type TransactionDtoTxTypeEnum = typeof TransactionDtoTxTypeEnum[keyof typeof TransactionDtoTxTypeEnum];


/**
 * Check if a given object implements the TransactionDto interface.
 */
export function instanceOfTransactionDto(value: object): value is TransactionDto {
    if (!('txHash' in value) || value['txHash'] === undefined) return false;
    if (!('txType' in value) || value['txType'] === undefined) return false;
    if (!('fromAddress' in value) || value['fromAddress'] === undefined) return false;
    if (!('toAddress' in value) || value['toAddress'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('blockNumber' in value) || value['blockNumber'] === undefined) return false;
    if (!('blockTimestamp' in value) || value['blockTimestamp'] === undefined) return false;
    if (!('gasUsed' in value) || value['gasUsed'] === undefined) return false;
    if (!('gasPriceWei' in value) || value['gasPriceWei'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function TransactionDtoFromJSON(json: any): TransactionDto {
    return TransactionDtoFromJSONTyped(json, false);
}

export function TransactionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionDto {
    if (json == null) {
        return json;
    }
    return {
        
        'txHash': json['txHash'],
        'txType': json['txType'],
        'fromAddress': json['fromAddress'],
        'toAddress': json['toAddress'],
        'amount': json['amount'],
        'blockNumber': json['blockNumber'],
        'blockTimestamp': json['blockTimestamp'],
        'gasUsed': json['gasUsed'],
        'gasPriceWei': json['gasPriceWei'],
        'status': json['status'],
        'createdAt': json['createdAt'],
    };
}

export function TransactionDtoToJSON(json: any): TransactionDto {
    return TransactionDtoToJSONTyped(json, false);
}

export function TransactionDtoToJSONTyped(value?: TransactionDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'txHash': value['txHash'],
        'txType': value['txType'],
        'fromAddress': value['fromAddress'],
        'toAddress': value['toAddress'],
        'amount': value['amount'],
        'blockNumber': value['blockNumber'],
        'blockTimestamp': value['blockTimestamp'],
        'gasUsed': value['gasUsed'],
        'gasPriceWei': value['gasPriceWei'],
        'status': value['status'],
        'createdAt': value['createdAt'],
    };
}

