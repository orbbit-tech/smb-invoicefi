/* tslint:disable */
/* eslint-disable */
/**
 * Orbbit Backend API
 * Orbbit Web3 Invoice Financing Platform - Backend API Documentation  Serves offchain data for SMB and Investor frontend applications.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionDto } from './TransactionDto';
import {
    TransactionDtoFromJSON,
    TransactionDtoFromJSONTyped,
    TransactionDtoToJSON,
    TransactionDtoToJSONTyped,
} from './TransactionDto';
import type { NftInvoiceDto } from './NftInvoiceDto';
import {
    NftInvoiceDtoFromJSON,
    NftInvoiceDtoFromJSONTyped,
    NftInvoiceDtoToJSON,
    NftInvoiceDtoToJSONTyped,
} from './NftInvoiceDto';

/**
 * 
 * @export
 * @interface NftDataDto
 */
export interface NftDataDto {
    /**
     * 
     * @type {string}
     * @memberof NftDataDto
     */
    tokenId: string;
    /**
     * 
     * @type {string}
     * @memberof NftDataDto
     */
    contractAddress: string;
    /**
     * Blockchain network ID
     * @type {number}
     * @memberof NftDataDto
     */
    chainId: number;
    /**
     * 
     * @type {string}
     * @memberof NftDataDto
     */
    ownerAddress: string;
    /**
     * 
     * @type {string}
     * @memberof NftDataDto
     */
    metadataUri?: string;
    /**
     * Unix timestamp
     * @type {number}
     * @memberof NftDataDto
     */
    mintedAt: number;
    /**
     * 
     * @type {string}
     * @memberof NftDataDto
     */
    mintedTxHash: string;
    /**
     * 
     * @type {NftInvoiceDto}
     * @memberof NftDataDto
     */
    invoice: NftInvoiceDto;
    /**
     * 
     * @type {Array<TransactionDto>}
     * @memberof NftDataDto
     */
    transactions: Array<TransactionDto>;
    /**
     * ISO 8601 date string
     * @type {string}
     * @memberof NftDataDto
     */
    createdAt: string;
}

/**
 * Check if a given object implements the NftDataDto interface.
 */
export function instanceOfNftDataDto(value: object): value is NftDataDto {
    if (!('tokenId' in value) || value['tokenId'] === undefined) return false;
    if (!('contractAddress' in value) || value['contractAddress'] === undefined) return false;
    if (!('chainId' in value) || value['chainId'] === undefined) return false;
    if (!('ownerAddress' in value) || value['ownerAddress'] === undefined) return false;
    if (!('mintedAt' in value) || value['mintedAt'] === undefined) return false;
    if (!('mintedTxHash' in value) || value['mintedTxHash'] === undefined) return false;
    if (!('invoice' in value) || value['invoice'] === undefined) return false;
    if (!('transactions' in value) || value['transactions'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function NftDataDtoFromJSON(json: any): NftDataDto {
    return NftDataDtoFromJSONTyped(json, false);
}

export function NftDataDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): NftDataDto {
    if (json == null) {
        return json;
    }
    return {
        
        'tokenId': json['tokenId'],
        'contractAddress': json['contractAddress'],
        'chainId': json['chainId'],
        'ownerAddress': json['ownerAddress'],
        'metadataUri': json['metadataUri'] == null ? undefined : json['metadataUri'],
        'mintedAt': json['mintedAt'],
        'mintedTxHash': json['mintedTxHash'],
        'invoice': NftInvoiceDtoFromJSON(json['invoice']),
        'transactions': ((json['transactions'] as Array<any>).map(TransactionDtoFromJSON)),
        'createdAt': json['createdAt'],
    };
}

export function NftDataDtoToJSON(json: any): NftDataDto {
    return NftDataDtoToJSONTyped(json, false);
}

export function NftDataDtoToJSONTyped(value?: NftDataDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tokenId': value['tokenId'],
        'contractAddress': value['contractAddress'],
        'chainId': value['chainId'],
        'ownerAddress': value['ownerAddress'],
        'metadataUri': value['metadataUri'],
        'mintedAt': value['mintedAt'],
        'mintedTxHash': value['mintedTxHash'],
        'invoice': NftInvoiceDtoToJSON(value['invoice']),
        'transactions': ((value['transactions'] as Array<any>).map(TransactionDtoToJSON)),
        'createdAt': value['createdAt'],
    };
}

