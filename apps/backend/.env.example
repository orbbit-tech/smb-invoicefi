# ============================================================================
# Backend Environment Configuration
# ============================================================================
# Copy this file to .env for local development
# For production, set these in your hosting platform (Railway, Render, etc.)

# ============================================================================
# Database Configuration (PostgreSQL via Kysely)
# ============================================================================
# Connect to Supabase PostgreSQL for runtime queries
# Get these from Supabase Dashboard → Settings → Database

POSTGRES_HOST=localhost
POSTGRES_PORT=54322
POSTGRES_DATABASE=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# ============================================================================
# Authentication (Stytch) - Dual Project Configuration
# ============================================================================
# Create two separate B2B projects in Stytch Dashboard: https://stytch.com/dashboard
# One for SMB platform, one for Investor platform

# SMB Stytch Project
# 1. Create B2B project named "Orbbit SMB"
# 2. Navigate to API Keys section
# 3. Copy Project ID (starts with "project-test-" or "project-live-")
# 4. Copy Secret (starts with "secret-test-" or "secret-live-")
STYTCH_SMB_PROJECT_ID=project-test-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
STYTCH_SMB_SECRET=secret-test-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Investor Stytch Project
# 1. Create another B2B project named "Orbbit Investor"
# 2. Navigate to API Keys section
# 3. Copy Project ID and Secret
STYTCH_INVESTOR_PROJECT_ID=project-test-yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy
STYTCH_INVESTOR_SECRET=secret-test-yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy

# Session Configuration (applies to both projects)
SESSION_DURATION_MINUTES=1440  # 24 hours (default)

# ============================================================================
# Server Configuration
# ============================================================================

# Port for NestJS backend
PORT=9000

# Node environment
NODE_ENV=development

# ============================================================================
# Blockchain Configuration
# ============================================================================

# Network: "local" | "base-sepolia" | "base-mainnet"
# - local: Hardhat/Anvil local blockchain (fast, no gas fees)
# - base-sepolia: Base Sepolia testnet (public testnet)
# - base-mainnet: Base Mainnet (production)
BLOCKCHAIN_NETWORK=base-sepolia

# ============================================================================
# RPC Configuration (Alchemy)
# ============================================================================
# Using Alchemy for RPC provides:
# - Same API key as webhooks (simpler setup)
# - 100M Compute Units/month free tier (sufficient for most apps)
# - Excellent monitoring and analytics dashboard
# - Automatic failover and load balancing
# - Archive node access included in free tier
#
# Get your API key from: https://dashboard.alchemy.com/
# 1. Create account or sign in
# 2. Create new app for Base network
# 3. Copy API key from dashboard
# 4. Use same key for RPC + webhooks below

# Local development (Hardhat/Anvil - no Alchemy needed)
LOCAL_RPC_URL=http://127.0.0.1:8545

# Alchemy RPC URLs (replace YOUR_API_KEY with actual key)
# Format: https://base-{network}.g.alchemy.com/v2/{your-api-key}
BASE_SEPOLIA_RPC_URL=https://base-sepolia.g.alchemy.com/v2/YOUR_API_KEY
BASE_MAINNET_RPC_URL=https://base-mainnet.g.alchemy.com/v2/YOUR_API_KEY

# Alternative: Public RPC endpoints (NOT recommended for production)
# These have rate limits and lower reliability
# BASE_SEPOLIA_RPC_URL=https://sepolia.base.org
# BASE_MAINNET_RPC_URL=https://mainnet.base.org

# Smart Contract Addresses (update after deployment)
# Local development (Hardhat/Anvil)
WHITELIST_CONTRACT_ADDRESS_LOCAL=
INVOICE_CONTRACT_ADDRESS_LOCAL=
INVOICE_FUNDING_POOL_CONTRACT_ADDRESS_LOCAL=

# Base Sepolia testnet
WHITELIST_CONTRACT_ADDRESS_BASE_SEPOLIA=
INVOICE_CONTRACT_ADDRESS_BASE_SEPOLIA=
INVOICE_FUNDING_POOL_CONTRACT_ADDRESS_BASE_SEPOLIA=

# Base Mainnet (production)
WHITELIST_CONTRACT_ADDRESS_BASE_MAINNET=
INVOICE_CONTRACT_ADDRESS_BASE_MAINNET=
INVOICE_FUNDING_POOL_CONTRACT_ADDRESS_BASE_MAINNET=

# ============================================================================
# Blockchain Webhooks Configuration
# ============================================================================

# Webhook Provider: "alchemy" (recommended, production-ready) | "cdp" (Alpha, backup)
WEBHOOK_PROVIDER=alchemy

# ============================================================================
# Alchemy Webhooks (Production-Ready, Recommended)
# ============================================================================
# Get credentials from: https://dashboard.alchemy.com/
# 1. Create account and select Base network
# 2. Go to "Webhooks" tab → Create Webhook
# 3. Copy API Key from dashboard home
# 4. Copy Signing Key from webhook detail page (looks like: whsec_xxxxx)

# Alchemy API Key (from dashboard home)
ALCHEMY_API_KEY=

# Alchemy Webhook Signing Key (from webhook detail page)
# Example: whsec_EcQnhWcncVkYyda2UgL15kiL
ALCHEMY_WEBHOOK_SIGNING_KEY=

# Your public webhook endpoint for Alchemy (must be HTTPS in production)
# For local development, use ngrok: https://ngrok.com/
# Example: ngrok http 9000 → https://abc123.ngrok.io/webhooks/blockchain/alchemy
ALCHEMY_WEBHOOK_URL=https://wealthy-incredibly-burro.ngrok-free.app/webhooks/blockchain/alchemy


# ============================================================================
# Polling Backup Configuration
# ============================================================================
# Polling catches any events that webhooks might miss (recommended: true)
POLLING_ENABLED=true

# Polling interval in milliseconds (default: 300000 = 5 minutes)
POLLING_INTERVAL_MS=300000

# Maximum blocks per eth_getLogs request
# Free tier: 10 blocks | Growth tier: 2000 blocks | Scale/Enterprise: unlimited
# Adjust based on your Alchemy plan to optimize performance
ALCHEMY_MAX_BLOCK_RANGE=10

# ============================================================================
# Block Explorer API Key (for contract verification/deployment)
# ============================================================================
# Get a free API key from: https://etherscan.io/myapikey
# This single key works for all Etherscan-supported networks:
#   - Ethereum Mainnet/Sepolia (etherscan.io)
#   - Base Mainnet/Sepolia (basescan.org)
#   - Optimism, Arbitrum, Polygon, and more

ETHERSCAN_API_KEY=
